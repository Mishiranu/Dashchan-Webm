buildscript {
	repositories {
		google()
		jcenter()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:3.6.4'
	}
}

allprojects {
	repositories {
		google()
		jcenter()
	}
}

apply plugin: 'com.android.application'

android {
	compileSdkVersion 30
	buildToolsVersion '30.0.2'
	ndkVersion '21.3.6528147'

	defaultConfig {
		versionCode 1
		versionName '1.5'

		minSdkVersion 16
		targetSdkVersion 30

		ndk.abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86'
	}

	sourceSets.main {
		manifest.srcFile 'AndroidManifest.xml'
		java.srcDirs = ['src']
		resources.srcDirs = []
		aidl.srcDirs = ['src']
		renderscript.srcDirs = ['src']
		res.srcDirs = ['res']
		assets.srcDirs = ['assets']
		jni.srcDirs = []
		jniLibs.srcDirs = []
	}

	if (file('keystore.properties').exists()) {
		def keystoreProperties = new Properties()
		keystoreProperties.load(new FileInputStream(file('keystore.properties')))
		signingConfigs.create('general') {
			storeFile file(keystoreProperties['store.file'])
			storePassword keystoreProperties['store.password']
			keyAlias keystoreProperties['key.alias']
			keyPassword keystoreProperties['key.password']
		}
		buildTypes.all { signingConfig signingConfigs.general }
	}

	buildTypes.all {
		crunchPngs false
		minifyEnabled false
	}
}

import org.apache.tools.ant.taskdefs.condition.Os

class ShellTask extends DefaultTask {
	@InputFile File script
	@Input List<String> arguments
	@Input Map<String, Object> environment
	@OutputDirectories FileCollection output

	@TaskAction
	def action() {
		if (Os.isFamily(Os.FAMILY_UNIX)) {
			project.exec {
				commandLine script.absolutePath
				args arguments
				environment << this.environment
			}.rethrowFailure().assertNormalExitValue()
		} else {
			throw new RuntimeException('Linux x86_64 is required to execute shell task')
		}
	}
}

def sharedSources = new File(project.buildDir, 'intermediates/shared_sources')
def sharedLibraries = new File(project.buildDir, 'intermediates/shared_libraries')
def sharedExternal = new File(project.buildDir, 'outputs/external')

task sharedPrepare(type: ShellTask) {
	script = file('shared-prepare.sh')
	arguments = [sharedSources.absolutePath]
	environment = [
			DAV1D_VERSION: '0.7.1',
			FFMPEG_VERSION: '4.3.1',
			YUV_VERSION: '6afd9becdf58822b1da6770598d8597c583ccfad',
	]
	output = files(sharedSources)
}

task sharedBuild(type: ShellTask) {
	dependsOn sharedPrepare
	script = file('shared-build.sh')
	arguments = [sharedSources.absolutePath, sharedLibraries.absolutePath, sharedExternal.absolutePath]
	environment = [
			ANDROID_NDK_HOME: android.ndkDirectory,
			EXTERNAL_CORES: Runtime.runtime.availableProcessors()
	]
	output = files(sharedLibraries, sharedExternal)
}

android.sourceSets.main.jniLibs.srcDirs = [
		new File(sharedLibraries, 'dav1d'),
		new File(sharedLibraries, 'ffmpeg'),
		new File(sharedLibraries, 'yuv')
]

afterEvaluate {
	android.buildTypes.all {
		String name = it.name.capitalize()
		tasks.getByName('compile' + name + 'Sources').dependsOn sharedBuild
	}
}
